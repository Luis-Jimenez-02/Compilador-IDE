
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL BREAK COMMA DIVIDE DO ELSE EQUALS FALSE FI FLOAT GREATER GREATEREQUAL IDENT IF INT LBRACE LBRACKET LESS LESSEQUAL LPAREN MINUS NOT NOTEQUAL NUMBER OR PLUS POWER PROGRAM RBRACE RBRACKET READ RPAREN SEMICOLON STRING THEN TIMES TRUE UNTIL WHILE WRITEprogram : PROGRAM LBRACE list_decl list_sent RBRACElist_decl : list_decl decl\n                 | decl\n                 | emptydecl : tipo list_id_array SEMICOLONlist_id_array : list_id_array COMMA id_array\n                    | id_arrayid_array : IDENT LBRACKET NUMBER RBRACKET\n                | IDENTtipo : INT\n            | FLOAT\n            | BOOLlist_id : list_id COMMA IDENT\n               | IDENTlist_sent : list_sent sent\n                 | sent\n                 | emptysent : IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI\n            | IF LPAREN exp_bool RPAREN THEN bloque FI\n            | WHILE LPAREN exp_bool RPAREN bloque\n            | DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON\n            | READ IDENT SEMICOLON\n            | WRITE write_list SEMICOLON\n            | IDENT ASSIGN exp_bool SEMICOLON\n            | IDENT LPAREN expression_list RPAREN SEMICOLON\n            | BREAK SEMICOLONwrite_list : write_list COMMA write_item\n                 | write_itemwrite_item : exp_bool\n                  | STRINGbloque : LBRACE list_sent RBRACEexp_bool : exp_bool OR comb\n                | combcomb : comb AND igualdad\n            | igualdadigualdad : igualdad EQUALS rel\n                | igualdad NOTEQUAL rel\n                | relrel : expr op_rel expr\n           | exprop_rel : LESS\n              | LESSEQUAL\n              | GREATER\n              | GREATEREQUALexpr : expr PLUS term\n            | expr MINUS term\n            | termterm : term TIMES power\n            | term DIVIDE power\n            | powerpower : unario POWER power\n             | unariounario : NOT unario\n              | MINUS unario\n              | factorfactor : IDENT LBRACKET expr RBRACKET\n              | LPAREN exp_bool RPAREN\n              | IDENT\n              | NUMBER\n              | TRUE\n              | FALSEexpression_list : expression_list COMMA exp_bool\n                       | exp_boolempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,25,],[0,-1,]),'LBRACE':([2,17,88,108,116,],[3,30,30,30,30,]),'IF':([3,4,5,6,11,12,13,14,26,30,53,54,60,61,65,90,91,109,111,117,118,120,],[-64,15,-3,-4,15,-2,-16,-17,-15,15,-26,-5,15,-22,-23,-31,-24,-20,-25,-19,-21,-18,]),'WHILE':([3,4,5,6,11,12,13,14,26,30,53,54,60,61,65,90,91,109,111,117,118,120,],[-64,16,-3,-4,16,-2,-16,-17,-15,16,-26,-5,16,-22,-23,-31,-24,-20,-25,-19,-21,-18,]),'DO':([3,4,5,6,11,12,13,14,26,30,53,54,60,61,65,90,91,109,111,117,118,120,],[-64,17,-3,-4,17,-2,-16,-17,-15,17,-26,-5,17,-22,-23,-31,-24,-20,-25,-19,-21,-18,]),'READ':([3,4,5,6,11,12,13,14,26,30,53,54,60,61,65,90,91,109,111,117,118,120,],[-64,18,-3,-4,18,-2,-16,-17,-15,18,-26,-5,18,-22,-23,-31,-24,-20,-25,-19,-21,-18,]),'WRITE':([3,4,5,6,11,12,13,14,26,30,53,54,60,61,65,90,91,109,111,117,118,120,],[-64,20,-3,-4,20,-2,-16,-17,-15,20,-26,-5,20,-22,-23,-31,-24,-20,-25,-19,-21,-18,]),'IDENT':([3,4,5,6,7,8,9,10,11,12,13,14,18,20,26,27,28,30,32,33,43,46,49,53,54,55,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,89,90,91,93,109,111,117,118,120,],[-64,19,-3,-4,24,-10,-11,-12,19,-2,-16,-17,31,48,-15,48,48,19,48,48,48,48,48,-26,-5,24,19,-22,-23,48,48,48,48,48,48,48,48,-41,-42,-43,-44,48,48,48,48,48,-31,-24,48,-20,-25,-19,-21,-18,]),'BREAK':([3,4,5,6,11,12,13,14,26,30,53,54,60,61,65,90,91,109,111,117,118,120,],[-64,21,-3,-4,21,-2,-16,-17,-15,21,-26,-5,21,-22,-23,-31,-24,-20,-25,-19,-21,-18,]),'INT':([3,4,5,6,12,54,],[8,8,-3,-4,-2,-5,]),'FLOAT':([3,4,5,6,12,54,],[9,9,-3,-4,-2,-5,]),'BOOL':([3,4,5,6,12,54,],[10,10,-3,-4,-2,-5,]),'RBRACE':([3,4,5,6,11,12,13,14,26,30,53,54,60,61,65,90,91,109,111,117,118,120,],[-64,-64,-3,-4,25,-2,-16,-17,-15,-64,-26,-5,90,-22,-23,-31,-24,-20,-25,-19,-21,-18,]),'LPAREN':([15,16,19,20,27,28,32,33,43,46,49,59,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,89,93,],[27,28,33,49,49,49,49,49,49,49,49,89,49,49,49,49,49,49,49,49,-41,-42,-43,-44,49,49,49,49,49,49,]),'ASSIGN':([19,],[32,]),'STRING':([20,66,],[37,37,]),'NOT':([20,27,28,32,33,43,46,49,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,89,93,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-41,-42,-43,-44,46,46,46,46,46,46,]),'MINUS':([20,27,28,32,33,41,42,43,44,45,46,47,48,49,50,51,52,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,93,99,100,101,102,103,104,105,106,113,],[43,43,43,43,43,73,-47,43,-50,-52,43,-55,-58,43,-59,-60,-61,43,43,43,43,43,43,43,43,-41,-42,-43,-44,43,43,-54,43,-53,43,43,43,73,-45,-46,-48,-49,-51,73,-57,-56,]),'NUMBER':([20,27,28,32,33,43,46,49,56,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,89,93,],[50,50,50,50,50,50,50,50,86,50,50,50,50,50,50,50,50,-41,-42,-43,-44,50,50,50,50,50,50,]),'TRUE':([20,27,28,32,33,43,46,49,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,89,93,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-41,-42,-43,-44,51,51,51,51,51,51,]),'FALSE':([20,27,28,32,33,43,46,49,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,89,93,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-41,-42,-43,-44,52,52,52,52,52,52,]),'SEMICOLON':([21,22,23,24,31,34,35,36,37,38,39,40,41,42,44,45,47,48,50,51,52,62,80,82,85,92,94,95,96,97,98,99,100,101,102,103,104,106,107,113,115,],[53,54,-7,-9,61,65,-28,-29,-30,-33,-35,-38,-40,-47,-50,-52,-55,-58,-59,-60,-61,91,-54,-53,-6,111,-27,-32,-34,-36,-37,-39,-45,-46,-48,-49,-51,-57,-8,-56,118,]),'COMMA':([22,23,24,34,35,36,37,38,39,40,41,42,44,45,47,48,50,51,52,63,64,80,82,85,94,95,96,97,98,99,100,101,102,103,104,106,107,112,113,],[55,-7,-9,66,-28,-29,-30,-33,-35,-38,-40,-47,-50,-52,-55,-58,-59,-60,-61,93,-63,-54,-53,-6,-27,-32,-34,-36,-37,-39,-45,-46,-48,-49,-51,-57,-8,-62,-56,]),'LBRACKET':([24,48,],[56,83,]),'UNTIL':([29,90,],[59,-31,]),'OR':([36,38,39,40,41,42,44,45,47,48,50,51,52,57,58,62,64,80,82,84,95,96,97,98,99,100,101,102,103,104,106,110,112,113,],[67,-33,-35,-38,-40,-47,-50,-52,-55,-58,-59,-60,-61,67,67,67,67,-54,-53,67,-32,-34,-36,-37,-39,-45,-46,-48,-49,-51,-57,67,67,-56,]),'RPAREN':([38,39,40,41,42,44,45,47,48,50,51,52,57,58,63,64,80,82,84,95,96,97,98,99,100,101,102,103,104,106,110,112,113,],[-33,-35,-38,-40,-47,-50,-52,-55,-58,-59,-60,-61,87,88,92,-63,-54,-53,106,-32,-34,-36,-37,-39,-45,-46,-48,-49,-51,-57,115,-62,-56,]),'AND':([38,39,40,41,42,44,45,47,48,50,51,52,80,82,95,96,97,98,99,100,101,102,103,104,106,113,],[68,-35,-38,-40,-47,-50,-52,-55,-58,-59,-60,-61,-54,-53,68,-34,-36,-37,-39,-45,-46,-48,-49,-51,-57,-56,]),'EQUALS':([39,40,41,42,44,45,47,48,50,51,52,80,82,96,97,98,99,100,101,102,103,104,106,113,],[69,-38,-40,-47,-50,-52,-55,-58,-59,-60,-61,-54,-53,69,-36,-37,-39,-45,-46,-48,-49,-51,-57,-56,]),'NOTEQUAL':([39,40,41,42,44,45,47,48,50,51,52,80,82,96,97,98,99,100,101,102,103,104,106,113,],[70,-38,-40,-47,-50,-52,-55,-58,-59,-60,-61,-54,-53,70,-36,-37,-39,-45,-46,-48,-49,-51,-57,-56,]),'PLUS':([41,42,44,45,47,48,50,51,52,80,82,99,100,101,102,103,104,105,106,113,],[72,-47,-50,-52,-55,-58,-59,-60,-61,-54,-53,72,-45,-46,-48,-49,-51,72,-57,-56,]),'LESS':([41,42,44,45,47,48,50,51,52,80,82,100,101,102,103,104,106,113,],[74,-47,-50,-52,-55,-58,-59,-60,-61,-54,-53,-45,-46,-48,-49,-51,-57,-56,]),'LESSEQUAL':([41,42,44,45,47,48,50,51,52,80,82,100,101,102,103,104,106,113,],[75,-47,-50,-52,-55,-58,-59,-60,-61,-54,-53,-45,-46,-48,-49,-51,-57,-56,]),'GREATER':([41,42,44,45,47,48,50,51,52,80,82,100,101,102,103,104,106,113,],[76,-47,-50,-52,-55,-58,-59,-60,-61,-54,-53,-45,-46,-48,-49,-51,-57,-56,]),'GREATEREQUAL':([41,42,44,45,47,48,50,51,52,80,82,100,101,102,103,104,106,113,],[77,-47,-50,-52,-55,-58,-59,-60,-61,-54,-53,-45,-46,-48,-49,-51,-57,-56,]),'RBRACKET':([42,44,45,47,48,50,51,52,80,82,86,100,101,102,103,104,105,106,113,],[-47,-50,-52,-55,-58,-59,-60,-61,-54,-53,107,-45,-46,-48,-49,-51,113,-57,-56,]),'TIMES':([42,44,45,47,48,50,51,52,80,82,100,101,102,103,104,106,113,],[78,-50,-52,-55,-58,-59,-60,-61,-54,-53,78,78,-48,-49,-51,-57,-56,]),'DIVIDE':([42,44,45,47,48,50,51,52,80,82,100,101,102,103,104,106,113,],[79,-50,-52,-55,-58,-59,-60,-61,-54,-53,79,79,-48,-49,-51,-57,-56,]),'POWER':([45,47,48,50,51,52,80,82,106,113,],[81,-55,-58,-59,-60,-61,-54,-53,-57,-56,]),'THEN':([87,],[108,]),'ELSE':([90,114,],[-31,116,]),'FI':([90,114,119,],[-31,117,120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'list_decl':([3,],[4,]),'decl':([3,4,],[5,12,]),'empty':([3,4,30,],[6,14,14,]),'tipo':([3,4,],[7,7,]),'list_sent':([4,30,],[11,60,]),'sent':([4,11,30,60,],[13,26,13,26,]),'list_id_array':([7,],[22,]),'id_array':([7,55,],[23,85,]),'bloque':([17,88,108,116,],[29,109,114,119,]),'write_list':([20,],[34,]),'write_item':([20,66,],[35,94,]),'exp_bool':([20,27,28,32,33,49,66,89,93,],[36,57,58,62,64,84,36,110,112,]),'comb':([20,27,28,32,33,49,66,67,89,93,],[38,38,38,38,38,38,38,95,38,38,]),'igualdad':([20,27,28,32,33,49,66,67,68,89,93,],[39,39,39,39,39,39,39,39,96,39,39,]),'rel':([20,27,28,32,33,49,66,67,68,69,70,89,93,],[40,40,40,40,40,40,40,40,40,97,98,40,40,]),'expr':([20,27,28,32,33,49,66,67,68,69,70,71,83,89,93,],[41,41,41,41,41,41,41,41,41,41,41,99,105,41,41,]),'term':([20,27,28,32,33,49,66,67,68,69,70,71,72,73,83,89,93,],[42,42,42,42,42,42,42,42,42,42,42,42,100,101,42,42,42,]),'power':([20,27,28,32,33,49,66,67,68,69,70,71,72,73,78,79,81,83,89,93,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,102,103,104,44,44,44,]),'unario':([20,27,28,32,33,43,46,49,66,67,68,69,70,71,72,73,78,79,81,83,89,93,],[45,45,45,45,45,80,82,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'factor':([20,27,28,32,33,43,46,49,66,67,68,69,70,71,72,73,78,79,81,83,89,93,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'expression_list':([33,],[63,]),'op_rel':([41,],[71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM LBRACE list_decl list_sent RBRACE','program',5,'p_program','syntax_parser.py',9),
  ('list_decl -> list_decl decl','list_decl',2,'p_list_decl','syntax_parser.py',14),
  ('list_decl -> decl','list_decl',1,'p_list_decl','syntax_parser.py',15),
  ('list_decl -> empty','list_decl',1,'p_list_decl','syntax_parser.py',16),
  ('decl -> tipo list_id_array SEMICOLON','decl',3,'p_decl','syntax_parser.py',31),
  ('list_id_array -> list_id_array COMMA id_array','list_id_array',3,'p_list_id_array','syntax_parser.py',35),
  ('list_id_array -> id_array','list_id_array',1,'p_list_id_array','syntax_parser.py',36),
  ('id_array -> IDENT LBRACKET NUMBER RBRACKET','id_array',4,'p_id_array','syntax_parser.py',43),
  ('id_array -> IDENT','id_array',1,'p_id_array','syntax_parser.py',44),
  ('tipo -> INT','tipo',1,'p_tipo','syntax_parser.py',51),
  ('tipo -> FLOAT','tipo',1,'p_tipo','syntax_parser.py',52),
  ('tipo -> BOOL','tipo',1,'p_tipo','syntax_parser.py',53),
  ('list_id -> list_id COMMA IDENT','list_id',3,'p_list_id','syntax_parser.py',57),
  ('list_id -> IDENT','list_id',1,'p_list_id','syntax_parser.py',58),
  ('list_sent -> list_sent sent','list_sent',2,'p_list_sent','syntax_parser.py',66),
  ('list_sent -> sent','list_sent',1,'p_list_sent','syntax_parser.py',67),
  ('list_sent -> empty','list_sent',1,'p_list_sent','syntax_parser.py',68),
  ('sent -> IF LPAREN exp_bool RPAREN THEN bloque ELSE bloque FI','sent',9,'p_sent','syntax_parser.py',83),
  ('sent -> IF LPAREN exp_bool RPAREN THEN bloque FI','sent',7,'p_sent','syntax_parser.py',84),
  ('sent -> WHILE LPAREN exp_bool RPAREN bloque','sent',5,'p_sent','syntax_parser.py',85),
  ('sent -> DO bloque UNTIL LPAREN exp_bool RPAREN SEMICOLON','sent',7,'p_sent','syntax_parser.py',86),
  ('sent -> READ IDENT SEMICOLON','sent',3,'p_sent','syntax_parser.py',87),
  ('sent -> WRITE write_list SEMICOLON','sent',3,'p_sent','syntax_parser.py',88),
  ('sent -> IDENT ASSIGN exp_bool SEMICOLON','sent',4,'p_sent','syntax_parser.py',89),
  ('sent -> IDENT LPAREN expression_list RPAREN SEMICOLON','sent',5,'p_sent','syntax_parser.py',90),
  ('sent -> BREAK SEMICOLON','sent',2,'p_sent','syntax_parser.py',91),
  ('write_list -> write_list COMMA write_item','write_list',3,'p_write_list','syntax_parser.py',112),
  ('write_list -> write_item','write_list',1,'p_write_list','syntax_parser.py',113),
  ('write_item -> exp_bool','write_item',1,'p_write_item','syntax_parser.py',120),
  ('write_item -> STRING','write_item',1,'p_write_item','syntax_parser.py',121),
  ('bloque -> LBRACE list_sent RBRACE','bloque',3,'p_bloque','syntax_parser.py',128),
  ('exp_bool -> exp_bool OR comb','exp_bool',3,'p_exp_bool','syntax_parser.py',132),
  ('exp_bool -> comb','exp_bool',1,'p_exp_bool','syntax_parser.py',133),
  ('comb -> comb AND igualdad','comb',3,'p_comb','syntax_parser.py',140),
  ('comb -> igualdad','comb',1,'p_comb','syntax_parser.py',141),
  ('igualdad -> igualdad EQUALS rel','igualdad',3,'p_igualdad','syntax_parser.py',148),
  ('igualdad -> igualdad NOTEQUAL rel','igualdad',3,'p_igualdad','syntax_parser.py',149),
  ('igualdad -> rel','igualdad',1,'p_igualdad','syntax_parser.py',150),
  ('rel -> expr op_rel expr','rel',3,'p_rel','syntax_parser.py',160),
  ('rel -> expr','rel',1,'p_rel','syntax_parser.py',161),
  ('op_rel -> LESS','op_rel',1,'p_op_rel','syntax_parser.py',168),
  ('op_rel -> LESSEQUAL','op_rel',1,'p_op_rel','syntax_parser.py',169),
  ('op_rel -> GREATER','op_rel',1,'p_op_rel','syntax_parser.py',170),
  ('op_rel -> GREATEREQUAL','op_rel',1,'p_op_rel','syntax_parser.py',171),
  ('expr -> expr PLUS term','expr',3,'p_expr','syntax_parser.py',175),
  ('expr -> expr MINUS term','expr',3,'p_expr','syntax_parser.py',176),
  ('expr -> term','expr',1,'p_expr','syntax_parser.py',177),
  ('term -> term TIMES power','term',3,'p_term','syntax_parser.py',187),
  ('term -> term DIVIDE power','term',3,'p_term','syntax_parser.py',188),
  ('term -> power','term',1,'p_term','syntax_parser.py',189),
  ('power -> unario POWER power','power',3,'p_power','syntax_parser.py',199),
  ('power -> unario','power',1,'p_power','syntax_parser.py',200),
  ('unario -> NOT unario','unario',2,'p_unario','syntax_parser.py',207),
  ('unario -> MINUS unario','unario',2,'p_unario','syntax_parser.py',208),
  ('unario -> factor','unario',1,'p_unario','syntax_parser.py',209),
  ('factor -> IDENT LBRACKET expr RBRACKET','factor',4,'p_factor','syntax_parser.py',219),
  ('factor -> LPAREN exp_bool RPAREN','factor',3,'p_factor','syntax_parser.py',220),
  ('factor -> IDENT','factor',1,'p_factor','syntax_parser.py',221),
  ('factor -> NUMBER','factor',1,'p_factor','syntax_parser.py',222),
  ('factor -> TRUE','factor',1,'p_factor','syntax_parser.py',223),
  ('factor -> FALSE','factor',1,'p_factor','syntax_parser.py',224),
  ('expression_list -> expression_list COMMA exp_bool','expression_list',3,'p_expression_list','syntax_parser.py',236),
  ('expression_list -> exp_bool','expression_list',1,'p_expression_list','syntax_parser.py',237),
  ('empty -> <empty>','empty',0,'p_empty','syntax_parser.py',244),
]
